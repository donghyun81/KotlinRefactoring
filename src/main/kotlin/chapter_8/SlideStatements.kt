package chapter_8

/*
 이름 : 8.6 문장 슬라이드하기
 개요 : 문장을 목적과 사용이 비슷한것들끼리 뭉치도록 슬라이드하기
 배경 : 함수를 모아놔야 함수를 추출할때 더 쉽고, 코드를 이해하기도 더 쉽다.
 */
/*
 절차
 1. 코드 조각(문장들)을 이동할 목표 위치를 찾는다. 코드 조각의 원래 위치와 목표 위치 사이의 코드들을 훑어보면서,
    조각을 모으고 나면 동작이 달라지는 코드가 있는지 살핀다.
    다음과 같은 간섭이 있다면 이 리팩터링은 포기한다
    - 코드 조각에서 참조하는 요소를 선언하는 문장 앞으로 이동이 불가능
    - 코드 조각을 참조하는 요소의 뒤로는 이동 불가능
    - 코드 조각에서 참조하는 요소를 수정하는 문장을 건너뛰어 이동 불가능
    - 코드 조각이 수정하는 요소를 참조하는 요소를 건너뛰어 이동 불가능
 2. 코드 조각을 원래 위치에서 잘라내어 목표 위치에 붙여 넣는다.
 3. 테스트
 */
class SlideStatements {
    //슬라이드 할 시 확인 요소 1. 무엇을 슬라이드할지(맥락과 관련있다)-> 선언과 사용이 위치가 가까운게 좋다 , 슬라이드 할 수 있는지
    // 명령 - 질의 분리 원칙을 지켜가며 코딩하면 부수효과를 없앨수 있고 부수효과가 없는 코드는 위치를 어디든지 재배치 할 수 있다.
    // 부수효과가 있을 경우에는 어떤 영향들이 생길지 코드를 분석해가면서 조심이 옮겨야한다.
    // 명령 - 질의 분리 원칙 : get을 통한 질의와 set을 통한 명령을 따로 구분해야한다.
    // 테스트 코드를 작성해서 문장 슬라이드시 원하는 값이 호출되는지 확인해가며 슬라이드할 위치를 찾을 수 있다

    //조건문이 있을 때의 슬라이드
    // 조건문 밖으로 슬라이드 할시 중복 로직이 제거되고 조건문 안으로 슬라이드시 중복 로직이 추가된다
}