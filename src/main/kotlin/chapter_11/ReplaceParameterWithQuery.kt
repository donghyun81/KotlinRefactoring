package chapter_11

/*
 이름 : 11.5 매개변수를 질의 함수로 바꾸기
 개요 : 함수가 받을 매개변수를 객체의 질의 함수로 바꾸는 기법
 배경 : 매개변수 목록은 함수의 변동 요인을 모아놓은 곳이다.
 함수의 동작에 변화를 줄 수 있는 일차적인 수단이다. 다른 코드와 마찬가지로 이 목록도 중복을 피해주는게 좋으며 짧을수록 이해하기 쉽다.
 피호출 함수가 스스로 '쉽게' 결정할 수 있는 값을 매개변수로 건네는 것도 일종의 중복
 이런 함수를 호출할 때 매개변수의 값은 호출자가 정하게 되는데, 이 결정은 사실 하지 않아도 된다.
 매개변수가 있으면 결정 주체가 호출자, 매개변수가 없다면 피호출자가 된다.(주로 피호출자가 결정하게 한다)
 책임 소재는 주로 피호출자로 옮기는데 피호출 함수가 하기에 적절한 일인 경우에만 그렇게 한다.
 매개변수를 유지해야할 경우: 매개변수 제거시 피호출 함수에 원치 않은 의존성이 생길경우 (해당 함수가 알지 못했으면 하는 요소에 접근해야하는 상황이 만들어질 경우)
 질의 함수로 바꾸는 경우 : 제거하려는 매개변수의 값을 다른 매개변수에 질의해서 얻을수 있다면
 주의 사항 : 대상 함수가 참조 투명(함수에 똑같은 값을 건네 호출하면 항상 똑같이 동작한다)해야 한다.
 이런 함수는 예측하고 테스트하기 쉬우니 이 특성이 사라지지 않도록 주의한다. 따라서 매개변수를 없애는 대신 가변 전역 변수를 이용하는 일은 하지 않는다.
 */

/*
 절차
 1. 필요하다면 대상 매개변수의 값을 계산하는 코드를 별로 함수로 추출 해놓는다.
 2. 함수 본문에서 대상 매개변수로의 참조를 모두 찾아서 그 매개변수의 값을 만들어주는 표현식을 참조하도록 바꾸고 수정시마다 테스트한다.
 3. 함수 선언 바꾸기로 대상 매개변수를 없앤다.
 */

class Order {
    val finalPrice: Double
        get() {
            val basePrice = quantity * itemPrice
            val discountLevel: Int = if (quantity > 100) 2 else 1
            return discountPrice(basePrice, discountLevel)
        }

    fun discountPrice(basePrice: Double, discountLevel: Int): Double {
        return when (discountLevel) {
            1 -> basePrice * 0.95
            2 -> basePrice * 0.9
            else -> basePrice
        }
    }

    // 임의의 예제 값으로 초기화
    var quantity: Int = 0
    var itemPrice: Double = 0.0
}
