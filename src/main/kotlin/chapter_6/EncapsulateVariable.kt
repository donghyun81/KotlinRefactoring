package chapter_6

/*
 이름 : 변수 캡슐화 하기
 개요 : 변수를 접근자와 설정자로 캡슐화한다
 배경 : 데이터는 참조하는 모든 부분을 한 번에 바꿔야 코드가 작동한다 (유효범위가 넓어질수록 다루기 어려워진다)
 데이터의 접근을 독점하는 캡슐화 작업이 좋은 해결법이다. 데이터 재구성을 함수 재구성이라는 단순한 작업으로 변환 할 수 있다.
 데이터를 변경하고 사용하는 코드를 감시 할 수 있다(변경 전, 변경 후 추가 로직을 쉽게 추가 할 수 있다)
 객체의 데이터를 항상 private로 유지해야함은 위와 같은 이유들에 기인한다.
 불변성이 보장되면 가변데이터보다 캡슐화할 이유가 적어진다.
 */

/*
 절차 :
 1. 변수로의 접근과 갱신을 전담하는 캡슐화 함수들을 만든다.
 2. 정적 검사를 수행
 3. 변수를 직접 참조하던 부분을 모두 적절한 캡슐화 함수 호출로 변경, 하나씩 변경될때마다 테스트
 4. 변수의 접근 범위를 제한
 5. 테스트
 6. 변수 값이 레코드라면 레코드  캡슐화하기를 적용할지 고려한다.
 */
fun main(){


}
class EncapsulateVariable {
    data class Owner(val firstName: String, val lastName: String)

    // Create the default owner
    var volume = 6
        set(value){if (value <0) 0 else value}
    var a = 2


}